{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["monday","mondaySdk","App","props","state","settings","name","boardData","createCount","dict","this","boards","items","map","item","key","column_values","text","setState","console","log","listen","res","data","context","api","variables","boardIds","then","className","style","background","title","mapKey","statusType","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wXAOMA,EAASC,MAoFAC,E,kDAjFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAGDC,MAAQ,CACXC,SAAU,GACVC,KAAM,GACNC,UAAU,KACVC,YAAY,IARG,E,0DAajB,IAAIC,EAAO,GACXC,KAAKN,MAAMG,UAAUI,OAAO,GAAGC,MAAMC,KAAI,SAAAC,GACvC,IAAIC,EAAMD,EAAKE,cAAc,GAAGC,KAC5BR,EAAKM,GACPN,EAAKM,IAAQ,EAEbN,EAAKM,GAAO,KAGhBL,KAAKQ,SAAS,CAACV,YAAaC,IAC5BU,QAAQC,IAAIV,KAAKN,MAAMI,e,6BAGlBO,GACL,OAAQA,GACN,IAAK,UACH,MAAO,gBAET,IAAK,UACH,MAAO,OAET,IAAK,SACH,MAAO,QAET,IAAK,OACH,MAAO,U,0CAOQ,IAAD,OAClBf,EAAOqB,OAAO,YAAY,SAAAC,GACxB,EAAKJ,SAAS,CAAEb,SAAUiB,EAAIC,UAGhCvB,EAAOqB,OAAO,WAAW,SAAAC,GACvB,EAAKJ,SAAS,CAACM,QAASF,EAAIC,OAC5BJ,QAAQC,IAAIE,EAAIC,MAChBvB,EAAOyB,IAAP,oLAME,CAAEC,UAAW,CAACC,SAAU,EAAKvB,MAAMoB,QAAQG,YAE5CC,MAAK,SAAAN,GACJ,EAAKJ,SAAS,CAACX,UAAWe,EAAIC,OAC9B,EAAKf,cACLW,QAAQC,IAAI,EAAKhB,MAAMG,mB,+BAKnB,IAAD,EACP,OAAO,yBAAKsB,UAAU,MAAMC,MAAO,CAACC,WAAWrB,KAAKN,MAAMC,SAAS0B,aACjE,kBAAC,KAAD,GACEC,MAAM,sCACNf,KAAK,+EAFP,qBAGQ,kBAAoBP,KAAKN,MAAMI,YAAYE,KAAKuB,OAAOvB,KAAKN,MAAMC,SAAS6B,aAAexB,KAAKN,MAAMI,YAAYE,KAAKuB,OAAOvB,KAAKN,MAAMC,SAAS6B,aAAc,IAHvK,qBAIQxB,KAAKN,MAAMC,SAAS6B,YAJ5B,S,GAxEYC,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.e552da05.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\"\n//Explore more Monday React Components here: https://style.monday.com/\nimport AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\"\n\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Default state\n    this.state = {\n      settings: {},\n      name: \"\",\n      boardData:null,\n      createCount:{}\n    };\n  }\n\n  createCount() {\n    let dict = {};\n    this.state.boardData.boards[0].items.map(item => {\n      let key = item.column_values[2].text\n      if (dict[key]) {\n        dict[key] += 1\n      } else {\n        dict[key] = 1\n      }\n    })\n    this.setState({createCount: dict});\n    console.log(this.state.createCount)\n  }\n\n  mapKey(key) {\n    switch (key) {\n      case 'primary':\n        return 'Working on it'\n        break;\n      case 'success':\n        return 'Done'\n        break;\n      case 'danger':\n        return 'Stuck'\n        break;\n      case 'dark':\n        return 'null'\n        break;\n      default:\n        break;\n    }\n  }\n\n  componentDidMount() {\n    monday.listen(\"settings\", res => {\n      this.setState({ settings: res.data });\n    });\n\n    monday.listen(\"context\", res => {\n      this.setState({context: res.data});\n      console.log(res.data);\n      monday.api(`query { boards (ids:1825108644) {\n                          items {\n                            column_values {text}\n                          }\n        }\n                }`,\n        { variables: {boardIds: this.state.context.boardIds} }\n      )\n      .then(res => {\n        this.setState({boardData: res.data});\n        this.createCount();\n        console.log(this.state.boardData)\n      });\n    })\n  }\n\n  render() {\n    return <div className=\"App\" style={{background:this.state.settings.background}}>\n      <AttentionBox\n        title=\"--Check Your Status Count(s) Here--\"\n        text=\"Select a 'status type' from the drop-down menu on the right to get started!\"\n        text={\"Status Count: \" + (this.state.createCount[this.mapKey(this.state.settings.statusType)] ? this.state.createCount[this.mapKey(this.state.settings.statusType)]: 0)}\n        type={this.state.settings.statusType}\n      />\n    </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}